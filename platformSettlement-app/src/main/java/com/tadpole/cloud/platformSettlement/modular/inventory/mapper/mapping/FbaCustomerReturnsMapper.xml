<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tadpole.cloud.platformSettlement.modular.inventory.mapper.FbaCustomerReturnsMapper">

  <!--FBA customer return列表、导出-->
  <select id="customPageList"
    resultType="com.tadpole.cloud.platformSettlement.api.inventory.entity.FbaCustomerReturns"
    parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.params.FbaCustomerReturnsParam">
    SELECT
      m.*,
      m.sales_platform platform,
      CASE m.VERIFY_STATUS WHEN 0 THEN '未审核' WHEN 1 THEN '已审核' WHEN 2 THEN '已作废' END verifyStatusCN,
      CASE m.GENERATE_STATUS WHEN 0 THEN '未生成' WHEN 1 THEN '已生成' END generateStatusCN
    FROM FBA_CUSTOMER_RETURNS m
    <where>
      <trim prefix="(" suffix=")" >
        <trim  suffixOverrides="OR">
          <if test="paramCondition.sysSites != null and paramCondition.sysSites.size > 0 ">
            m.SYS_SITE IN
            <foreach collection="paramCondition.sysSites" open="(" close=")" separator="," item="sysSite">
              #{sysSite}
            </foreach>
          </if>
          OR
          <if test="paramCondition.sysSite =='空'.toString()">
            m. SYS_SITE IS NULL
          </if>
        </trim>
      </trim>
      <if test="paramCondition.sysShopsNames != null and paramCondition.sysShopsNames.size>0">
        AND m.SYS_SHOPS_NAME IN
        <foreach collection="paramCondition.sysShopsNames" open="(" close=")" separator="," item="sysShopsName">
          #{sysShopsName}
        </foreach>
      </if>
      <if test="paramCondition.skus != null and paramCondition.skus.size>0">
        AND m.sku IN
        <foreach collection="paramCondition.skus" open="(" close=")" separator="," item="sku">
          #{sku}
        </foreach>
      </if>
      <if test="paramCondition.verifyStatuss != null and paramCondition.verifyStatuss.size>0">
        AND m.VERIFY_STATUS IN
        <foreach collection="paramCondition.verifyStatuss" open="(" close=")" separator="," item="verifyStatus">
          #{verifyStatus}
        </foreach>
      </if>
      <if test="paramCondition.generateStatuss != null and paramCondition.generateStatuss.size>0">
        AND m.GENERATE_STATUS IN
        <foreach collection="paramCondition.generateStatuss" open="(" close=")" separator="," item="generateStatus">
          #{generateStatus}
        </foreach>
      </if>
      <if test="paramCondition.startDate != null and paramCondition.startDate != '' and paramCondition.endDate != null and paramCondition.endDate != ''">
        AND m.RETURN_DATE BETWEEN
        to_date(#{paramCondition.startDate},'YYYY-MM-DD HH24:MI:SS') AND
        to_date(#{paramCondition.endDate},'YYYY-MM-DD HH24:MI:SS')+1 - INTERVAL '1' SECOND
      </if>
      <if test="paramCondition.uploadMark != null and paramCondition.uploadMark != ''">
        AND m.upload_mark =#{paramCondition.uploadMark}
      </if>
      <if test="paramCondition.orderId != null and paramCondition.orderId != ''">
        AND m.ORDER_ID =#{paramCondition.orderId}
      </if>
      <choose>
        <when test="paramCondition.platform =='空'.toString()">
          AND m.SALES_PLATFORM IS NULL
        </when>
        <when test="paramCondition.platform != null and paramCondition.platform != ''">
          AND m.SALES_PLATFORM =#{paramCondition.platform}
        </when>
        <otherwise>
        </otherwise>
      </choose>
      <choose>
        <when test="paramCondition.salesCode =='空'.toString()">
          AND (m.SALES_ORGANIZATION_CODE IS NULL OR m.INVENTORY_ORGANIZATION_CODE IS NULL)
        </when>
        <when test="paramCondition.salesCode != null and paramCondition.salesCode != ''">
          AND m.SALES_ORGANIZATION_CODE =#{paramCondition.salesCode}
        </when>
        <otherwise>
        </otherwise>
      </choose>
    </where>
  </select>

  <!--获取数量合计-->
  <select id="getQuantity" resultType="java.lang.Integer"
    parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.params.FbaCustomerReturnsParam">
    SELECT SUM(quantity)
    FROM FBA_CUSTOMER_RETURNS m
    <where>
      <trim prefix="(" suffix=")" >
        <trim  suffixOverrides="OR">
          <if test="paramCondition.sysSites != null and paramCondition.sysSites.size > 0 ">
            m.SYS_SITE IN
            <foreach collection="paramCondition.sysSites" open="(" close=")" separator="," item="sysSite">
              #{sysSite}
            </foreach>
          </if>
          OR
          <if test="paramCondition.sysSite =='空'.toString()">
            m. SYS_SITE IS NULL
          </if>
        </trim>
      </trim>
      <if test="paramCondition.sysShopsNames != null and paramCondition.sysShopsNames.size>0">
        AND m.SYS_SHOPS_NAME IN
        <foreach collection="paramCondition.sysShopsNames" open="(" close=")" separator="," item="sysShopsName">
          #{sysShopsName}
        </foreach>
      </if>
      <if test="paramCondition.skus != null and paramCondition.skus.size>0">
        AND m.sku IN
        <foreach collection="paramCondition.skus" open="(" close=")" separator="," item="sku">
          #{sku}
        </foreach>
      </if>
      <if test="paramCondition.verifyStatuss != null and paramCondition.verifyStatuss.size>0">
        AND m.VERIFY_STATUS IN
        <foreach collection="paramCondition.verifyStatuss" open="(" close=")" separator="," item="verifyStatus">
          #{verifyStatus}
        </foreach>
      </if>
      <if test="paramCondition.generateStatuss != null and paramCondition.generateStatuss.size>0">
        AND m.GENERATE_STATUS IN
        <foreach collection="paramCondition.generateStatuss" open="(" close=")" separator="," item="generateStatus">
          #{generateStatus}
        </foreach>
      </if>
      <if test="paramCondition.startDate != null and paramCondition.startDate != '' and paramCondition.endDate != null and paramCondition.endDate != ''">
        AND m.RETURN_DATE BETWEEN
        to_date(#{paramCondition.startDate},'YYYY-MM-DD HH24:MI:SS') AND
        to_date(#{paramCondition.endDate},'YYYY-MM-DD HH24:MI:SS')+1 - INTERVAL '1' SECOND
      </if>
      <if test="paramCondition.uploadMark != null and paramCondition.uploadMark != ''">
        AND m.upload_mark =#{paramCondition.uploadMark}
      </if>
      <if test="paramCondition.orderId != null and paramCondition.orderId != ''">
        AND m.ORDER_ID =#{paramCondition.orderId}
      </if>
      <choose>
        <when test="paramCondition.platform =='空'.toString()">
          AND m.SALES_PLATFORM IS NULL
        </when>
        <when test="paramCondition.platform != null and paramCondition.platform != ''">
          AND m.SALES_PLATFORM =#{paramCondition.platform}
        </when>
        <otherwise>
        </otherwise>
      </choose>
      <choose>
        <when test="paramCondition.salesCode =='空'.toString()">
          AND (m.SALES_ORGANIZATION_CODE IS NULL OR m.INVENTORY_ORGANIZATION_CODE IS NULL)
        </when>
        <when test="paramCondition.salesCode != null and paramCondition.salesCode != ''">
          AND m.SALES_ORGANIZATION_CODE =#{paramCondition.salesCode}
        </when>
        <otherwise>
        </otherwise>
      </choose>
    </where>
  </select>

  <!--根据账号、站点、sku获取物料编码-->
  <select id="getMaterial"
    parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.params.FbaCustomerReturnsParam"
    resultType="java.lang.String">
    SELECT a.material_code
    FROM mcms_base_data.inv_product_gallery a
    WHERE a.sku = #{paramCondition.sku}
      AND a.sys_site = #{paramCondition.sysSite}
      AND a.sys_shops_name = #{paramCondition.sysShopsName }
  </select>

  <!--获取销售退货列表单据头数据-->
  <select id="getListHeader"
    parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.params.FbaCustomerReturnsParam"
    resultType="com.tadpole.cloud.platformSettlement.api.inventory.model.result.FbaCustomerReturnsResult">
    SELECT
       to_char(to_date(#{paramCondition.returnDate}, 'YYYY/MM'), 'YYYY') YEAR,
       to_char(to_date(#{paramCondition.returnDate}, 'YYYY/MM'), 'MM') MONTH,
       sysdate UPDATE_AT,
       sales_platform PLATFORM,
       SYS_SHOPS_NAME,
       SYS_SITE,
       ORG,
       INVENTORY_ORGANIZATION_CODE,
       WAREHOUSE_NAME,
       WAREHOUSE_CODE,
       SALES_ORGANIZATION,
       SALES_ORGANIZATION_CODE
    FROM FBA_CUSTOMER_RETURNS t
    WHERE
      to_char(t.RETURN_DATE, 'YYYY/MM') = to_char(to_date(#{paramCondition.returnDate}, 'YYYY/MM'), 'YYYY/MM')
      AND NVL(t.GENERATE_STATUS, 0) = 0
      AND t.VERIFY_STATUS = 1
      AND t.INVENTORY_ORGANIZATION_CODE IS NOT NULL
      AND t.SALES_ORGANIZATION_CODE IS NOT NULL
    GROUP BY
      EXTRACT(YEAR FROM to_date(#{paramCondition.returnDate}, 'YYYYMM')),
      EXTRACT(MONTH FROM to_date(#{paramCondition.returnDate}, 'YYYYMM')),
      sales_platform,
      SYS_SHOPS_NAME,
      SYS_SITE,
      org,
      INVENTORY_ORGANIZATION_CODE,
      WAREHOUSE_NAME,
      WAREHOUSE_CODE,
      SALES_ORGANIZATION,
      SALES_ORGANIZATION_CODE
  </select>

  <!--获取销售退货列表明细数据-->
  <select id="getDetailList"
    parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.result.SalesReturnResult"
    resultType="com.tadpole.cloud.platformSettlement.api.inventory.entity.SalesReturnDetail">
    SELECT SKU,
           sales_platform platform,
           SYS_SHOPS_NAME SHOP_NAME,
           SYS_SITE       SITE,
           SUM(QUANTITY)  SALES_RETURN_AMOUNT,
           0              IS_CANCEL,
           0              SYNC_STATUS,
           sysDate        UPDATE_AT,
           CASE
             WHEN DETAILED_DISPOSITION = 'SELLABLE' THEN 'SELLABLE'
             WHEN DETAILED_DISPOSITION = 'Sellable' THEN 'SELLABLE'
             WHEN DETAILED_DISPOSITION IS NULL THEN 'SELLABLE'
             ELSE 'UNSELLABLE'
             END          INVENTORY_STATUS
    FROM FBA_CUSTOMER_RETURNS t
    WHERE to_char(t.RETURN_DATE, 'YYYYMM') = #{paramCondition.year} || #{paramCondition.month}
      AND t.sales_platform = #{paramCondition.platform}
      AND t.SYS_SHOPS_NAME = #{paramCondition.sysShopsName}
      AND t.SYS_SITE = #{paramCondition.sysSite}
      AND t.SALES_ORGANIZATION_CODE = #{paramCondition.salesOrganizationCode}
      AND t.INVENTORY_ORGANIZATION_CODE = #{paramCondition.inventoryOrganizationCode}
      And t.GENERATE_STATUS = 0
      AND t.verify_status = 1
      AND NVL(t.status, '空') != 'Reimbursed'
    GROUP BY SKU, sales_platform,
             SYS_SHOPS_NAME,
             SYS_SITE,
             CASE
               WHEN DETAILED_DISPOSITION = 'SELLABLE' THEN 'SELLABLE'
               WHEN DETAILED_DISPOSITION = 'Sellable' THEN 'SELLABLE'
               WHEN DETAILED_DISPOSITION IS NULL THEN 'SELLABLE'
               ELSE 'UNSELLABLE'
               END
  </select>

  <!--销售退货列表明细刷listing-->
  <update id="updateDetailList">
    MERGE INTO (SELECT * FROM SALES_RETURN_DETAIL WHERE (DEPARTMENT IS NULL OR TEAM IS NULL OR MATERIAL_CODE IS NULL )) d
    USING mcms_base_data.inv_product_gallery g
    ON (
      UPPER(d.sku) = UPPER(g.sku)
      AND d.site = g.SYS_SITE
      AND d.shop_name = g.SYS_SHOPS_NAME
    )
    WHEN MATCHED THEN
    UPDATE SET d.department = g.department, d.team = g.team, d.material_code = g.material_code
  </update>

  <!--销售退货列表明细刷存档listing-->
  <update id="updateFileDetailList">
    MERGE INTO (SELECT * FROM SALES_RETURN_DETAIL WHERE (DEPARTMENT IS NULL OR TEAM IS NULL OR MATERIAL_CODE IS NULL)) D
    USING (
      SELECT
        SKU,
        SYS_SITE,
        SYS_SHOPS_NAME,
        MATERIAL_CODE,
        DEPARTMENT,
        TEAM,
        LAST_UPDATE_DATE
      FROM (
        SELECT
          SKU,
          SYS_SITE,
          SYS_SHOPS_NAME,
          MATERIAL_CODE,
          DEPARTMENT,
          TEAM,
          LAST_UPDATE_DATE,
          ROW_NUMBER() OVER(PARTITION BY SKU, SYS_SITE, SYS_SHOPS_NAME  ORDER BY LAST_UPDATE_DATE DESC) AS rn
        FROM MCMS_BASE_DATA.INV_PRODUCT_GALLERY_FILE
      ) t
      WHERE t.rn = 1
    ) G
    ON (UPPER(D.sku) = UPPER(G.sku) AND D.SITE = G.SYS_SITE AND D.SHOP_NAME = G.SYS_SHOPS_NAME)
    WHEN MATCHED THEN
      UPDATE SET D.DEPARTMENT = G.DEPARTMENT, D.TEAM = G.TEAM, D.MATERIAL_CODE = G.MATERIAL_CODE
  </update>

  <!--更新销售退货源报告FBA_CUSTOMER_RETURNS的生成状态和单据编码-->
  <select id="updateSrcList" parameterType="com.tadpole.cloud.platformSettlement.api.inventory.model.result.SalesReturnResult">
    UPDATE FBA_CUSTOMER_RETURNS
    SET
      bill_code = #{paramCondition.billCode},
      generate_status = 1,
      update_time = SYSDATE,
      update_by = #{paramCondition.updateBy}
    WHERE
      generate_status = 0
      AND verify_status = 1
      AND to_char(RETURN_DATE, 'YYYYMM') = #{paramCondition.year} || #{paramCondition.month}
      AND sys_shops_name = #{paramCondition.sysShopsName}
      AND SYS_SITE = #{paramCondition.sysSite}
      AND SALES_ORGANIZATION_CODE = #{paramCondition.salesOrganizationCode}
      AND INVENTORY_ORGANIZATION_CODE = #{paramCondition.inventoryOrganizationCode}
      AND BILL_CODE IS NULL
  </select>

  <!--批量作废-->
  <update id="rejectBatch" parameterType="java.util.List">
    UPDATE FBA_CUSTOMER_RETURNS a
    SET
      a.VERIFY_AT = SYSDATE,
      a.UPDATE_TIME = SYSDATE,
      a.VERIFY_BY = #{paramCondition.verifyBy},
      a.UPDATE_BY = #{paramCondition.updateBy},
      a.VERIFY_STATUS = 2
    WHERE
      a.verify_status = 0
      AND a.generate_status = 0
      AND a.id IN
      <foreach collection="paramCondition.idList" open="(" close=")" separator="," item="id">
        #{id}
      </foreach>
  </update>

  <!--批量审核-->
  <update id="verifyUpdateBatch">
    UPDATE  FBA_CUSTOMER_RETURNS a
    SET
      a.VERIFY_AT = SYSDATE,
      a.UPDATE_TIME = SYSDATE,
      a.VERIFY_BY = #{paramCondition.verifyBy},
      a.UPDATE_BY = #{paramCondition.updateBy},
      a.VERIFY_STATUS = 1
    WHERE
      a.VERIFY_STATUS = 0
      AND a.GENERATE_STATUS = 0
      AND a.INVENTORY_ORGANIZATION_CODE IS NOT NULL
      AND a.SALES_ORGANIZATION_CODE IS NOT NULL
      AND a.WAREHOUSE_CODE IS NOT NULL
      AND a.BILL_CODE IS NULL
      <if test="paramCondition.sysShopsNames != null and paramCondition.sysShopsNames.size>0">
        AND a.SYS_SHOPS_NAME IN
        <foreach collection="paramCondition.sysShopsNames" open="(" close=")" separator="," item="sysShopsName">
          #{sysShopsName}
        </foreach>
      </if>
      <if test="paramCondition.sysSites != null and paramCondition.sysSites.size>0">
        AND a.SYS_SITE IN
        <foreach collection="paramCondition.sysSites" open="(" close=")" separator="," item="sysSite">
          #{sysSite}
        </foreach>
      </if>
      <if test="paramCondition.skus != null and paramCondition.skus.size>0">
        AND a.sku IN
        <foreach collection="paramCondition.skus" open="(" close=")" separator="," item="sku">
          #{sku}
        </foreach>
      </if>
      <if test="paramCondition.startDate != null and paramCondition.startDate != '' and paramCondition.endDate != null and paramCondition.endDate != ''">
        AND a.RETURN_DATE BETWEEN
        to_date(#{paramCondition.startDate},'YYYY-MM-DD HH24:MI:SS') AND
        to_date(#{paramCondition.endDate},'YYYY-MM-DD HH24:MI:SS')+1 - INTERVAL '1' SECOND
      </if>
      <if test="paramCondition.uploadMark != null and paramCondition.uploadMark != ''">
        AND a.upload_mark =#{paramCondition.uploadMark}
      </if>
      <if test="paramCondition.platform != null and paramCondition.platform != ''">
        AND a.SALES_PLATFORM =#{paramCondition.platform}
      </if>
      <choose>
        <when test="paramCondition.salesCode =='空'.toString()">
          AND m.SALES_ORGANIZATION_CODE IS NULL
        </when>
        <when test="paramCondition.salesCode != null and paramCondition.salesCode != ''">
          AND m.SALES_ORGANIZATION_CODE =#{paramCondition.salesCode}
        </when>
        <otherwise>
        </otherwise>
      </choose>
  </update>

  <!--根据组织编码和物料编码批量分配物料-->
  <select id="assignMaterialList" parameterType="java.util.List"
    resultType="com.tadpole.cloud.platformSettlement.api.inventory.entity.ZZDistributeMcms">
    SELECT
      t.INVENTORY_ORGANIZATION_CODE shop_code,
      d.material_code
    FROM sales_return t
    JOIN sales_return_detail d ON t.id = d.out_id
    WHERE
      d.id IN
      <foreach collection="detailIdList" open="(" close=")" separator="," item="id">
        #{id}
      </foreach>
    UNION
    SELECT
      t.sales_organization_code shop_code,
      d.material_code
    FROM sales_return t
    JOIN sales_return_detail d ON t.id = d.out_id
    WHERE
      d.id IN
      <foreach collection="detailIdList" open="(" close=")" separator="," item="id">
        #{id}
      </foreach>
  </select>

  <!--获取没有刷上销售组织编码和库存组织编码的数据-->
  <select id="remainList" resultType="com.tadpole.cloud.platformSettlement.api.inventory.entity.FbaCustomerReturns">
    select m.*,sales_platform platform
    from FBA_CUSTOMER_RETURNS m
    where m.SALES_ORGANIZATION_CODE is null
      and m.sales_platform is not null
      and m.sys_site is not null
      and m.sales_platform is not null
      and m.ORDER_ID not like 'M%'
      and m.ORDER_ID not like 'TP%'
      and m.sales_platform != 'Error'
  </select>

  <!--根据组织名称刷库存组织编码-->
  <update id="refreshOrgCode">
    MERGE INTO FBA_CUSTOMER_RETURNS A
    USING (
        SELECT
          wc.ORGANIZATION_CODE,
          wc.ORGANIZATION_NAME
        FROM erp_warehouse_code wc
        WHERE wc.ORGANIZATION_TYPE = 'organization'
        GROUP BY
          wc.ORGANIZATION_CODE,
          wc.ORGANIZATION_NAME
    ) C
    ON (A.ORG  = C.ORGANIZATION_NAME)
    WHEN MATCHED THEN
      UPDATE
      SET A.INVENTORY_ORGANIZATION_CODE = C.ORGANIZATION_CODE
      WHERE A.ORG IS NOT NULL
        AND A.INVENTORY_ORGANIZATION_CODE IS NULL
  </update>

  <!--根据仓库组织名称刷仓库组织编码-->
  <update id="refreshWareOrgCode">
    MERGE INTO FBA_CUSTOMER_RETURNS A
    USING (
        SELECT
          wc.ORGANIZATION_CODE,
          wc.ORGANIZATION_NAME
        FROM erp_warehouse_code wc
        WHERE wc.ORGANIZATION_TYPE = 'warehouse'
        GROUP BY
          wc.ORGANIZATION_CODE,
          wc.ORGANIZATION_NAME
    ) C
    ON (A.WAREHOUSE_NAME = C.ORGANIZATION_NAME)
    WHEN MATCHED THEN
        UPDATE SET A.WAREHOUSE_CODE = C.ORGANIZATION_CODE
        WHERE A.WAREHOUSE_NAME IS NOT NULL
            AND A.WAREHOUSE_CODE IS NULL
  </update>

  <!--根据销售组织名称刷销售组织编码-->
  <update id="refreshSalOrgCode">
    MERGE
    INTO FBA_CUSTOMER_RETURNS A
    USING (
    SELECT wc.ORGANIZATION_CODE, wc.ORGANIZATION_NAME
    FROM erp_warehouse_code wc
    GROUP BY wc.ORGANIZATION_CODE, wc.ORGANIZATION_NAME) C
    ON (A.SALES_ORGANIZATION =    C.ORGANIZATION_NAME)
    WHEN MATCHED THEN UPDATE SET A.SALES_ORGANIZATION_CODE = C.ORGANIZATION_CODE
    WHERE A.SALES_ORGANIZATION IS NOT NULL
    AND A.SALES_ORGANIZATION_CODE IS NULL
  </update>

  <!--平台为null的先去订单表刷平台-->
  <update id="refreshOrderPlatform">
    MERGE INTO FBA_CUSTOMER_RETURNS S
      USING(
        SELECT
          O.MERCHANT_ORDER_ID,
          O.AMAZON_ORDER_ID,
          OD.SKU,
          OD.PLATFORM,
          OD.SYS_SHOPS_NAME,
          OD.SYS_SITE
        FROM ${amazonOrders} O
               LEFT JOIN ${amazonOrderDetail} OD ON O.AMAZON_ORDER_ID = OD.AMAZON_ORDER_ID GROUP BY O.MERCHANT_ORDER_ID,
      O.AMAZON_ORDER_ID,OD.SKU,OD.PLATFORM,OD.SYS_SHOPS_NAME,OD.SYS_SITE
      ) T ON (S.ORDER_ID = T.MERCHANT_ORDER_ID AND S.SKU = T.SKU)
      WHEN MATCHED THEN
        UPDATE
          SET S.SALES_PLATFORM = T.PLATFORM
      WHERE S.SALES_PLATFORM IS NULL
  </update>

  <!--刷组织名称（Amazon_账号_站点）和仓库组织名称（Amazon_账号_站点_仓库）-->
  <update id="addOrgName" >
    UPDATE FBA_CUSTOMER_RETURNS A
    SET A.org = 'Amazon_' || A.SYS_SHOPS_NAME || '_' ||A.SYS_SITE,
        A.warehouse_name = 'Amazon_' || A.SYS_SHOPS_NAME || '_' ||A.SYS_SITE || '_仓库'
    WHERE (A.org IS NULL OR A.warehouse_name IS NULL)
      AND A.SALES_PLATFORM IS NOT NULL
      AND A.SYS_SHOPS_NAME IS NOT NULL
      AND A.SYS_SITE IS NOT NULL
  </update>

  <!--匹配订单表刷销售组织名称（平台_账号_站点，只刷平台为Amazon的）-->
  <update id="addSalOrg">
    MERGE INTO FBA_CUSTOMER_RETURNS A
    USING (
        SELECT
          AMAZON_ORDER_ID,
          SKU,
          SYS_SITE,
          SYS_SHOPS_NAME,
          PLATFORM
        FROM MCMS_BASE_DATA.AMAZON_ORDER_DETAIL
        GROUP BY
            AMAZON_ORDER_ID,
            SKU,
            SYS_SITE,
            SYS_SHOPS_NAME,
            PLATFORM
    ) C
    ON (A.ORDER_ID = C.AMAZON_ORDER_ID AND A.SKU = C.SKU)
    WHEN MATCHED THEN
      UPDATE SET A.SALES_ORGANIZATION = C.PLATFORM || '_' || C.SYS_SHOPS_NAME || '_' || C.SYS_SITE
      WHERE A.SALES_PLATFORM = 'Amazon' AND A.SALES_ORGANIZATION IS NULL
  </update>

  <!--销售组织为空的，拿到FBA_SHIPMENT_SALES的AMAZON_ORDER_ID去匹配AMAZON_ORDERS的MERCHANT_ORDER_ID，再根据AMAZON_ORDER_DETAIL拿到销售平台、账号、站点（只刷平台为Amazon的）-->
  <update id="refreshOrderSalOrg">
    MERGE INTO FBA_CUSTOMER_RETURNS S
      USING(
        SELECT
          O.MERCHANT_ORDER_ID,
          O.AMAZON_ORDER_ID,
          OD.SKU,
          OD.PLATFORM,
          OD.SYS_SHOPS_NAME,
          OD.SYS_SITE
        FROM ${amazonOrders} O
        LEFT JOIN ${amazonOrderDetail} OD ON O.AMAZON_ORDER_ID = OD.AMAZON_ORDER_ID GROUP BY O.MERCHANT_ORDER_ID,
       O.AMAZON_ORDER_ID,OD.SKU,OD.PLATFORM,OD.SYS_SHOPS_NAME,OD.SYS_SITE
      ) T ON (S.ORDER_ID = T.MERCHANT_ORDER_ID AND S.SKU = T.SKU)
      WHEN MATCHED THEN
        UPDATE
          SET S.SALES_ORGANIZATION = T.PLATFORM || '_' || T.SYS_SHOPS_NAME || '_' || T.SYS_SITE
      WHERE S.SALES_PLATFORM = 'Amazon' AND S.SALES_ORGANIZATION IS NULL
  </update>

  <!--拿到OrderId和sku去结算报告里匹配销售组织名称（平台_账号_站点，只刷平台为Amazon的）-->
  <update id="refreshSalOrg">
    MERGE INTO FBA_CUSTOMER_RETURNS A
    USING (
			SELECT
				D.MERCHANT_ORDER_ID,
				D.PLATFORM,
				D.SYS_SHOPS_NAME,
				D.SYS_SITE,
				D.SKU
			FROM ${settlementDetail} D
			WHERE D.PLATFORM = 'Amazon'
			    AND D.CREATE_TIME >= ADD_MONTHS(SYSDATE, -3)
			GROUP BY
				D.MERCHANT_ORDER_ID,
				D.PLATFORM,
				D.SYS_SHOPS_NAME,
				D.SYS_SITE,
				D.SKU
    ) C
    ON (A.ORDER_ID = C.MERCHANT_ORDER_ID AND A.SKU = C.SKU)
    WHEN MATCHED THEN
      UPDATE
      SET A.SALES_ORGANIZATION = C.PLATFORM || '_' || C.SYS_SHOPS_NAME || '_' || C.SYS_SITE
      WHERE A.SALES_PLATFORM = 'Amazon' AND  A.SALES_ORGANIZATION IS NULL
  </update>

  <!--针对B2B情况特殊处理，FBA_SHIPMENT_SALES存在B2B平台解析出来是Amazon，需要替换销售组织编码位：B2B_MK_ALL-->
  <update id="updateB2BSalOrg">
      UPDATE FBA_CUSTOMER_RETURNS S
      SET S.SALES_ORGANIZATION = 'B2B_MK_ALL'
      WHERE S.SALES_ORGANIZATION LIKE 'B2B_%' AND S.SALES_ORGANIZATION != 'B2B_MK_ALL'
  </update>

  <!--针对eBay刷销售组织名称:数据为【eBay】的：销售账号从amazon_order_id中获取，第一个“-”和第二个“-”之间的字符串即为销售账号，站点值为ALL-->
  <update id="addEBaySalOrg">
    UPDATE FBA_CUSTOMER_RETURNS S
    SET S.SALES_ORGANIZATION = 'eBay_' || SUBSTR(S.ORDER_ID, 6, 2) || '_ALL'
    WHERE S.SALES_PLATFORM = 'eBay' AND S.SALES_ORGANIZATION IS NULL
  </update>

  <!--针对Rakuten刷销售组织名称:数据为【Rakuten】的：销售账号从amazon_order_id中获取，第一个“-”和第二个“-”之间的字符串即为销售账号，站点值取表中sys_site字段值-->
  <update id="addRakutenSalOrg">
    UPDATE FBA_CUSTOMER_RETURNS S
    SET S.SALES_ORGANIZATION = 'Rakuten_' || SUBSTR(S.ORDER_ID, 4, 2) || '_' || S.SYS_SITE
    WHERE S.SALES_PLATFORM = 'Rakuten' AND S.SALES_ORGANIZATION IS NULL
  </update>
</mapper>
