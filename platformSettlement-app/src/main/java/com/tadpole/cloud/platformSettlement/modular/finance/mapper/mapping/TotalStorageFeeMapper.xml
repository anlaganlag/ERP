<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tadpole.cloud.platformSettlement.modular.finance.mapper.TotalStorageFeeMapper">


    <sql id="CONDITION_TOTAL_STORAGE">
            <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
                AND SYS_SHOPS_NAME IN
                <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                    #{sysShopsName}
                </foreach>
            </if>

            <if test="param.sysShopsName != null and param.sysShopsName != '' ">
                AND SYS_SHOPS_NAME =   #{param.sysShopsName}
            </if>



            <if test="param.sysSites != null and param.sysSites.size() != 0">
                AND SYS_SITE IN
                <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                    #{sysSite}
                </foreach>
            </if>


            <if test="param.startDur != null and param.endDur != null ">
                AND to_char(duration, 'yyyy-mm')    >=      #{param.startDur}    and #{param.endDur} >= to_char(duration, 'yyyy-mm')
            </if>
    </sql>



    <sql id="STATION_CONDITION">
            <if test="param.fiscalPeriod != null and param.fiscalPeriod != ''">
                AND fiscal_Period  = #{param.fiscalPeriod}
            </if>

            <if test="param.shopName != null and param.shopName != ''">
                AND shop_Name  = #{param.shopName}
            </if>

            <if test="param.shopNames != null and param.shopNames.size() != 0">
                AND shop_Name IN
                <foreach collection="param.shopNames" item="shopName" index="index" separator="," open="(" close=")">
                    #{shopName}
                </foreach>
            </if>

            <if test="param.sites != null and param.sites.size() != 0">
                AND site IN
                <foreach collection="param.sites" item="site" index="index" separator="," open="(" close=")">
                    #{site}
                </foreach>
            </if>
    </sql>

    <sql id="MON_STORAGE_CONDITION">
        <if test="param.fiscalPeriod != null and param.fiscalPeriod != ''">
            AND to_char(add_months(to_date(month_of_charge, 'YYYY-MM'),1),'YYYY-MM')  = #{param.fiscalPeriod}
        </if>

        <if test="param.shopName != null and param.shopName != ''">
            AND sys_shops_name  = #{param.shopName}
        </if>

        <if test="param.sites != null and param.sites.size() != 0">
            AND sys_site IN
            <foreach collection="param.sites" item="sites" index="index" separator="," open="(" close=")">
                #{sites}
            </foreach>
        </if>
    </sql>

    <sql id="LONG_STORAGE_CONDITION">
            AND  status   in (2,3)
        <if test="param.fiscalPeriod != null and param.fiscalPeriod != ''">
            AND TO_CHAR(snapshot_date, 'YYYY-MM')  = #{param.fiscalPeriod}
        </if>

        <if test="param.shopName != null and param.shopName != ''">
            AND sys_shops_name  = #{param.shopName}
        </if>

        <if test="param.sites != null and param.sites.size() != 0">
            AND sys_site IN
            <foreach collection="param.sites" item="sites" index="index" separator="," open="(" close=")">
                #{sites}
            </foreach>
        </if>
    </sql>


    <sql id="OVER_STORAGE_CONDITION">
        AND  status  in (2,3)
        <if test="param.fiscalPeriod != null and param.fiscalPeriod != ''">
            AND to_char(add_months(charged_date,1),'YYYY-MM')  = #{param.fiscalPeriod}
        </if>

        <if test="param.shopName != null and param.shopName != ''">
            AND sys_shops_name  = #{param.shopName}
        </if>

        <if test="param.sites != null and param.sites.size() != 0">
            AND sys_site IN
            <foreach collection="param.sites" item="sites" index="index" separator="," open="(" close=")">
                #{sites}
            </foreach>
        </if>
    </sql>



    <select id="afreshCount">
        declare
        --期间日期，默认生成当前的上一个月费用数据，取默认日期，如果需要刷历史数据，修改dur日期到指定月份日期即可
        dur date;
        begin
        dur := to_date( #{date},'yyyy-MM-dd');
        --当前月生成的数据先清掉
        delete Total_Storage_Fee where duration = add_months(trunc(dur, 'mm'), -1);
        delete TEMP_TOTAL_STORAGE_FEE where 1 = 1;
        --生成当前月的账期费用
        insert into TEMP_TOTAL_STORAGE_FEE(sys_shops_name, sys_site, currency, b_storage_fee, b_storage_long_fee,
        b_storage_overage_fee, b_totalfee, duration)
        --账单金额
        SELECT SYS_SHOPS_NAME,
        SYS_SITE,
        CURRENCY,
        sum(bStorageFee)        bStorageFee,
        sum(bStorageLongFee)    bStorageLongFee,
        sum(bStorageOverageFee) bStorageOverageFee,
        sum(bTotalFee)          bTotalFee,
        trunc(duration, 'mm')   duration
        FROM (
        SELECT a.SYS_SHOPS_NAME,
        a.SYS_SITE,
        trunc(b.POSTED_DATE, 'mm')                                          duration,
        CURRENCY                                                            CURRENCY,
        decode(AMOUNT_DESCRIPTION, 'Storage Fee', sum(AMOUNT), 0)           bStorageFee,-- 月仓储费,
        decode(AMOUNT_DESCRIPTION, 'StorageRenewalBilling', sum(AMOUNT), 0) bStorageLongFee,--  长期仓储费,
        decode(AMOUNT_DESCRIPTION, 'Inventory Storage Overage Fee', sum(AMOUNT),
        0)                                                           bStorageOverageFee, --超库容费
        nvl(sum(AMOUNT), 0)                                                 bTotalFee --账单合计

        FROM CW_SETTLEMENT a
        join CW_SETTLEMENT_DETAIL b on a.SETTLEMENT_ID = b.SETTLEMENT_ID
        where a.SETTLEMENT_ID in (SELECT CW_STATEMENT_INCOME.SETTLEMENT_ID
        FROM CW_STATEMENT_INCOME
        where INCOME_TYPE in ('确认', '预估')
        and REPORT_TYPE = 'Settlement'
        and START_TIME >= add_months(trunc(dur, 'mm'), -1)
        and START_TIME &lt; trunc(dur, 'mm')
        )
        and FINANCE_TYPE = 'STORAGE FEE'
        and AMOUNT_DESCRIPTION in
        ('Storage Fee', 'StorageRenewalBilling', 'Inventory Storage Overage Fee')
        --期间
        and b.POSTED_DATE >= add_months(trunc(dur, 'mm'), -1)
        and b.POSTED_DATE &lt; trunc(dur, 'mm')
        group by a.SYS_SHOPS_NAME, a.SYS_SITE, AMOUNT_DESCRIPTION, a.CURRENCY, trunc(b.POSTED_DATE, 'mm')
        )
        group by SYS_SHOPS_NAME, SYS_SITE, CURRENCY, duration;

        --源报告 超库容费
        insert into TEMP_TOTAL_STORAGE_FEE(sys_shops_name, sys_site, storage_overage_fee, currency, duration)
        SELECT SYS_SHOPS_NAME,
        SYS_SITE,
        sum(CHARGED_FEE_AMOUNT)          amount,
        CURRENCY_CODE,
        add_months(trunc(dur, 'mm'), -1) duration
        FROM INVENTORY_STORAGE_OVERAGE_FEES
        where CHARGED_DATE >= add_months(trunc(dur, 'mm'), -2)
        and CHARGED_DATE &lt;  add_months(trunc(dur, 'mm'), -1) --取当前上上个月的数据
        and status in (2,3)     --取已确认源报告 超库容费
        group by SYS_SHOPS_NAME, SYS_SITE, CURRENCY_CODE;

        --源报告 月仓储费
        insert into TEMP_TOTAL_STORAGE_FEE(sys_shops_name, sys_site, storage_fee, currency, duration)
        SELECT SYS_SHOPS_NAME,
        SYS_SITE,
        decode(SYS_SITE, 'JP',ceil(sum(estimated_monthly_storage_fee)*1.1),sum(estimated_monthly_storage_fee)),
        CURRENCY,
        add_months(trunc(dur, 'mm'), -1)   duration
        FROM MONTHLY_STORAGE_FEES
        where MONTH_OF_CHARGE = to_char(add_months(trunc(dur, 'mm'), -2), 'yyyy-MM') --取当前上上个月的数据
        and status in (2,3)     --取已确认源报告 月仓储费

        group by SYS_SHOPS_NAME, SYS_SITE, CURRENCY;
        --源报告 长期仓储费
        insert into TEMP_TOTAL_STORAGE_FEE(sys_shops_name, sys_site, storage_long_fee, currency, duration)
        SELECT SYS_SHOPS_NAME,
        SYS_SITE,
        sum(MO6_LONG_TERMS_STORAGE_FEE + MO12_LONG_TERMS_STORAGE_FEE) amount,
        CURRENCY,
        add_months(trunc(dur, 'mm'), -1)                              duration
        FROM long_term_storage_fee_charges a
        where SNAPSHOT_DATE >= add_months(trunc(dur, 'mm'), -1)
        and SNAPSHOT_DATE &lt; trunc(dur, 'mm') --取当前上个月的数据
        and status in (2,3)     --取已确认源报告 长期仓储费

        group by SYS_SHOPS_NAME, SYS_SITE, CURRENCY;


        insert into TOTAL_STORAGE_FEE(SYS_SHOPS_NAME, SYS_SITE, CURRENCY, B_STORAGE_FEE, B_STORAGE_LONG_FEE,
        B_STORAGE_OVERAGE_FEE, B_TOTALFEE, STORAGE_OVERAGE_FEE, STORAGE_FEE, STORAGE_LONG_FEE,
        TOTAL_FEE, D_STORAGE_FEE, D_STORAGELONG_FEE, D_STORAGE_OVERAGE_FEE, D_TOTAL_FEE,
        DURATION)
        SELECT sys_shops_name
        , sys_site
        , currency
        , sum(b_storage_fee)                                              b_storage_fee
        , sum(b_storage_long_fee)                                         b_storage_long_fee
        , sum(b_storage_overage_fee)                                      b_storage_overage_fee
        , sum(b_storage_fee + b_storage_long_fee + b_storage_overage_fee) b_totalfee
        , sum(storage_overage_fee)                                        storage_overage_fee
        , round(sum(storage_fee),2)                                                storage_fee
        , sum(storage_long_fee)                                           storage_long_fee
        , round(sum(storage_overage_fee + storage_fee + storage_long_fee),2)       total_fee
        , round(sum(b_storage_fee + storage_fee),2)                               d_storage_fee
        , sum(b_storage_long_fee + storage_long_fee)                      d_storagelong_fee
        , sum(b_storage_overage_fee + storage_overage_fee)                d_storage_overage_fee
        , round(sum(b_storage_fee + b_storage_long_fee + b_storage_overage_fee + storage_overage_fee + storage_fee +
        storage_long_fee),2)                                           d_total_fee
        , duration
        FROM TEMP_TOTAL_STORAGE_FEE
        group by sys_shops_name, sys_site, currency, duration;

        end;
    </select>


    <select id="stationSum"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.model.result.StationManualAllocationAllocResult">

        SELECT t.fiscal_period || t.shop_name || t.site siteDimension,
               COUNT(*),

               SUM(t.storage_fee) storage_fee,
               SUM(t.advertising) advertising
        FROM rp_station_manual_allocation t
        <where>
            <include refid="STATION_CONDITION"/>
        </where>


        GROUP BY t.fiscal_period, t.shop_name, t.site

    </select>

    <select id="updateAllocFee"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.model.result.StationManualAllocationAllocResult">

        MERGE INTO (SELECT t1.*

        FROM rp_station_manual_allocation t1
        <where>
            <include refid="STATION_CONDITION"/>
            AND t1.alloc_id IS NULL
        </where>


       ) t1
        USING
        (

        SELECT t.fiscal_period || t.shop_name || t.site siteDimension,
        COUNT(*),

        SUM(t.storage_fee) storage_fee,
        SUM(t.advertising) advertising
        FROM rp_station_manual_allocation t
        <where>
            <include refid="STATION_CONDITION"/>
            AND t.alloc_id IS NULL
        </where>


        GROUP BY t.fiscal_period, t.shop_name, t.site) t2
        ON (  t1.fiscal_period || t1.shop_name || t1.site = t2.siteDimension)
        WHEN MATCHED THEN UPDATE
        SET t1.storage_fee = t2.storage_fee ,t1.advertising = t2.advertising



    </select>

    <select id="insertOverStorage">

        INSERT INTO rp_station_manual_allocation a
        (a.alloc_id,
         a.fiscal_period,
         a.report_type,
         a.income_type,
         a.shop_name,
         a.site,
         a.accounting_currency,
         a.sku,
         a.storage_fee,
         a.advertising,
         a.storage_fee_alloc_rate,
         a.storage_fee_ori,
         a.CREATE_AT)
        SELECT a.id,
               a.fiscal_period,
               a.report_type,
               a.income_type,
               a.shop_name,
               a.site,
               'USD',
               '超库容费',
               0,
               0,
               0,
               -NVL(b.amount,0),
               SYSDATE
        FROM (SELECT  id,
                      SITE,
                      shop_name,
                      fiscal_Period,
                      report_type,
                      income_type,
                      alloc_id,
                      accounting_currency,
                      sku,
                      storage_fee,
                      storage_fee_alloc_rate,
                      storage_fee_ori * #{directRate}
               FROM RP_STATION_MANUAL_ALLOCATION
        <where>
            AND alloc_id IS NULL
            AND confirm_status = 2
            <include refid="STATION_CONDITION">
            </include>
        </where>) a
        LEFT JOIN
            (SELECT to_char(add_months(t.charged_date,1), 'YYYY-MM') || t.sys_shops_name || t.sys_site siteDimension,
                    t.CURRENCY_CODE accounting_currency,
                    NVL(SUM(CHARGED_FEE_AMOUNT),0) amount
             FROM inventory_storage_overage_fees t
        <where>
            <include refid="OVER_STORAGE_CONDITION"/>
        </where>
             GROUP BY to_char(add_months(t.charged_date,1), 'YYYY-MM'),t.sys_shops_name,t.sys_site,t.CURRENCY_CODE) b
        ON
            a.fiscal_period || a.shop_name || a.site = b.sitedimension


    </select>

    <select id="noTicked"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="java.lang.Integer">
        SELECT SUM(not_ticked)
        FROM (SELECT COUNT(*) not_ticked
          FROM monthly_storage_fees
        <where>
            NVL(status,1) = 1
            <include refid="MON_STORAGE_CONDITION"/>
        </where>
        UNION ALL
        SELECT COUNT(*) not_ticked
          FROM long_term_storage_fee_charges
        <where>
            NVL(status,1) = 1
            <include refid="LONG_STORAGE_CONDITION"/>
        </where>)
    </select>

    <select id="toInsertdetailSum"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="java.lang.Double">
        SELECT NVL(SUM(fee), 0) storage_fee
        FROM (SELECT SUM(decode(SYS_SITE,
                    'JP',
                    estimated_monthly_storage_fee * 1.1,
                    estimated_monthly_storage_fee)) fee
        FROM monthly_storage_fees
        <where>
            AND  status in (2,3)
            <include refid="MON_STORAGE_CONDITION"/>
        </where>

        UNION ALL

        SELECT SUM(MO6_LONG_TERMS_STORAGE_FEE + MO12_LONG_TERMS_STORAGE_FEE) fee
        FROM long_term_storage_fee_charges
        <where>
            AND  status in (2,3)

            <include refid="LONG_STORAGE_CONDITION"/>
        </where>)
    </select>

    <select id="fillAllocLineVales"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam">
        BEGIN
<!--        更新汇总行(状态2)的仓储费汇总,广告费汇总,仓储费原值汇总(上月月仓储+本月长期仓储),分摊比例(结算仓储费/仓储费原值)保留12位小数-->
        MERGE INTO (SELECT * FROM   RP_STATION_MANUAL_ALLOCATION
            <where>
                <include refid="STATION_CONDITION"/>
                AND alloc_id IS NULL
                AND confirm_status =2
            </where>) a
        USING (
            SELECT  detail.id,
                    alloc.sitedimension,
                    alloc.storage_fee,
                     NVL(t1.mon_fee,0) +  NVL(t2.long_fee,0) storage_fee_ori,
                    ROUND(DECODE( NVL(t1.mon_fee,0) +  NVL(t2.long_fee,0),0,9999, alloc.storage_fee/( NVL(t1.mon_fee,0) +  NVL(t2.long_fee,0))),12)          storage_fee_alloc_rate

            FROM (SELECT * FROM   rp_station_manual_allocation
                    <where>
                        <include refid="STATION_CONDITION"/>
                        AND alloc_id IS NULL
                        AND confirm_status =2
                    </where> ) detail

            JOIN (SELECT fiscal_period || shop_name || site siteDimension,SUM(storage_fee) storage_fee,SUM(advertising) advertising  FROM rp_station_manual_allocation
                    <where>
                        <include refid="STATION_CONDITION"/>
                        AND alloc_id IS NULL
                    </where>
                    GROUP BY fiscal_period, shop_name, site) alloc
            ON    detail.fiscal_period || detail.shop_name || detail.site  = alloc.siteDimension

            LEFT JOIN (SELECT to_char(add_months(to_date(month_of_charge, 'YYYY-MM'),1),'YYYY-MM') || sys_shops_name || sys_site sitedimension,
                              SUM(decode(SYS_SITE,'JP',estimated_monthly_storage_fee * 1.1,estimated_monthly_storage_fee)) mon_fee
            FROM MONTHLY_STORAGE_FEES
            <where>
                AND  status in (2,3)

                <include refid="MON_STORAGE_CONDITION"/>
            </where>
            GROUP BY to_char(add_months(to_date(month_of_charge, 'YYYY-MM'),1),'YYYY-MM') , sys_shops_name , sys_site ) t1
            ON alloc.siteDimension = t1.sitedimension

            LEFT JOIN (SELECT TO_CHAR(SNAPSHOT_DATE, 'YYYY-MM') || sys_shops_name ||sys_site sitedimension,
                              SUM(MO6_LONG_TERMS_STORAGE_FEE + MO12_LONG_TERMS_STORAGE_FEE) long_fee
            FROM LONG_TERM_STORAGE_FEE_CHARGES
            <where>
                AND  status in (2,3)

                <include refid="LONG_STORAGE_CONDITION"/>
            </where>
            GROUP BY TO_CHAR(snapshot_date, 'YYYY-MM') || sys_shops_name || sys_site) t2
            ON alloc.sitedimension = t2.sitedimension ) b
        ON (a.id = b.id)
        WHEN MATCHED THEN UPDATE  SET
            a.storage_fee = b.storage_fee,
            a.storage_fee_ori = b.storage_fee_ori,
            a.storage_fee_alloc_rate = b.storage_fee_alloc_rate;

        <!--        更新非汇总(状态3)的仓储费汇总,广告费汇总为0,相当于非汇总行仓储费和广告费合并到汇总行-->
        UPDATE RP_STATION_MANUAL_ALLOCATION
        SET storage_fee        = 0
        <where>
            <include refid="STATION_CONDITION"/>
            AND alloc_id IS NULL
            AND confirm_status = 3
        </where>;
        END;

    </select>


    <select id="assignAllocLineStatus"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam">

       BEGIN
<!--        更新状态为0的分摊行为2即未主分摊行,数据范围:会计区间-店铺-站点维度中单条和多条中含有Settlement的分摊行-->
           MERGE INTO (SELECT t.id, t.confirm_status
               FROM RP_STATION_MANUAL_ALLOCATION t
                <where>
                    <include refid="STATION_CONDITION"/>
                    AND t.alloc_id IS NULL
                    AND t.confirm_status = 0
                </where>) a
           USING (SELECT t.id
           FROM (SELECT t.*
                 FROM rp_station_manual_allocation t
                <where>
                    <include refid="STATION_CONDITION"/>
                    AND t.report_type = 'Settlement'
                    AND t.alloc_id IS NULL
                </where> ) t
           RIGHT JOIN (SELECT COUNT(*), t.fiscal_period, t.shop_name, t.site
                     FROM RP_STATION_MANUAL_ALLOCATION t
                    <where>
                        <include refid="STATION_CONDITION"/>
                        AND t.alloc_id IS NULL
                    </where>
                    GROUP BY t.fiscal_period, t.shop_name, t.site
                   HAVING COUNT(*) > 1) t1
           ON t.fiscal_period || t.shop_name || t.site =
              t1.fiscal_period || t1.shop_name || t1.site
           UNION ALL
           SELECT t.id
             FROM (SELECT t.*
                     FROM rp_station_manual_allocation t
                    <where>
                        <include refid="STATION_CONDITION"/>
                        AND t.alloc_id IS NULL
                    </where>) t
            RIGHT JOIN (SELECT COUNT(*), t.fiscal_period, t.shop_name, t.site
                         FROM RP_STATION_MANUAL_ALLOCATION t
                        <where>
                            <include refid="STATION_CONDITION"/>
                            AND t.alloc_id IS NULL
                        </where>
                        GROUP BY t.fiscal_period, t.shop_name, t.site
                       HAVING COUNT(*) = 1) t1
               ON t.fiscal_period || t.shop_name || t.site =
                  t1.fiscal_period || t1.shop_name || t1.site) b
            ON (a.id = b.id)
               WHEN MATCHED THEN
                UPDATE SET a.confirm_status = 2;
        <!--        更新状态为0的分摊行为3即非主分摊行,数据范围:会计区间-店铺-站点维度多条中非Settlement的分摊行-->

            MERGE INTO (SELECT t.id, t.confirm_status
                       FROM RP_STATION_MANUAL_ALLOCATION t
                        <where>
                            <include refid="STATION_CONDITION"/>
                            AND t.alloc_id IS NULL
                            AND t.confirm_status = 0
                        </where>) a
            USING (SELECT t.id
                     FROM (SELECT t.*
                             FROM rp_station_manual_allocation t
                        <where>
                            <include refid="STATION_CONDITION"/>
                            AND t.report_type != 'Settlement'
                            AND t.alloc_id IS NULL
                        </where> ) t
                    RIGHT JOIN (SELECT COUNT(*), t.fiscal_period, t.shop_name, t.site
                                 FROM RP_STATION_MANUAL_ALLOCATION t
                                <where>
                                    <include refid="STATION_CONDITION"/>
                                    AND t.alloc_id IS NULL
                                </where>
                                GROUP BY t.fiscal_period, t.shop_name, t.site
                               HAVING COUNT(*) > 1) t1
                       ON t.fiscal_period || t.shop_name || t.site =
                          t1.fiscal_period || t1.shop_name || t1.site) b
            ON (a.id = b.id)
           WHEN MATCHED THEN
                       UPDATE SET a.confirm_status = 3;

           END;

    </select>





    <select id="selectTotalStorage"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.TotalStorageFeeParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.model.result.StationManualAllocationAllocResult"
    >


        SELECT stl_storage_fee,ori_storage_fee,storage_alloc_ration ,ori_storage_overage_fee,B.*FROM (
          SELECT

<!--                    合计里的结算仓储费-->
                 b_totalfee stl_storage_fee,
<!--         合计里的的源报告费用-->
                 storage_fee + storage_long_fee ori_storage_fee,
<!--         合计里的结算和源报告的比值-->
                 round(decode(nvl(storage_fee,0)+nvl(storage_long_fee,0),0,9999,b_totalfee/(storage_fee+storage_long_fee) ),12) storage_alloc_ration,
<!--        合计里超库容费-->
                 STORAGE_OVERAGE_FEE ori_storage_overage_fee,
                 to_char(duration, 'yyyy-mm') || sys_shops_name || sys_site siteDimension
          FROM TOTAL_STORAGE_FEE
        <where>
            <include refid="CONDITION_TOTAL_STORAGE"/>
        </where>        ) A
                RIGHT   JOIN
              (SELECT t.FISCAL_PERIOD||t.shop_name||t.site siteDimension,t.* FROM  RP_STATION_MANUAL_ALLOCATION t

        WHERE alloc_id IS NULL AND CONFIRM_STATUS = 0
        <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
            AND shop_name IN
            <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                #{sysShopsName}
            </foreach>
        </if>

        <if test="param.sysShopsName != null and param.sysShopsName != '' ">
            AND shop_name =   #{param.sysShopsName}
        </if>

        <if test="param.sysSites != null and param.sysSites.size() != 0">
            AND site IN
            <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                #{sysSite}
            </foreach>
        </if>


        <if test="param.startDur != null and param.endDur != null ">
            AND fiscal_period    >=      #{param.startDur}    and #{param.endDur} >= fiscal_period
        </if>


        )  B
              ON A.siteDimension =  B.siteDimension



    </select>


    <select id="selectdetailStorage"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.TotalStorageFeeParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.model.result.StationManualAllocationResult"
    >

 SELECT COALESCE(t1.sitedimension, t2.sitedimension) siteDimension,
        COALESCE(t1.sku, t2.sku) sku,
        COALESCE(t1.MATERIAL_CODE, t2.MATERIAL_CODE) material_code,
        t1.mon_fee,
        t2.long_fee,
        NVL(t1.mon_fee, 0) + NVL(t2.long_fee, 0) STORAGE_fee
   FROM (

         SELECT to_char(add_months(to_date(t.month_of_charge, 'YYYY-MM'), 1),
                         'YYYY-MM') || t.sys_shops_name || t.sys_site sitedimension,
                 SUM(decode(SYS_SITE,
                                  'JP',
                                  estimated_monthly_storage_fee * 1.1,
                                  estimated_monthly_storage_fee))                        mon_fee,
                 MAX(sku) sku,
                 MAX(MATERIAL_CODE) MATERIAL_CODE

           FROM MONTHLY_STORAGE_FEES t
        /*  WHERE t.sys_site = 'IT'
            AND t.sys_shops_name = 'XMJC'
            AND to_char(add_months(to_date(t.month_of_charge, 'YYYY-MM'), 1),
                        'YYYY-MM') = '2023-11'*/
        <where>

            <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
                AND t.SYS_SHOPS_NAME IN
                <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                    #{sysShopsName}
                </foreach>
            </if>

            <if test="param.sysSites != null and param.sysSites.size() != 0">
                AND SYS_SITE IN
                <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                    #{sysSite}
                </foreach>
            </if>
            <if test="param.startDur != null and param.startDur != '' ">
                to_char(add_months(to_date(t.month_of_charge, 'YYYY-MM'), 1),
                'YYYY-MM') >= #{startDur}
            </if>
            <if test="param.endDur != null and param.endDur != '' ">
                to_char(add_months(to_date(t.month_of_charge, 'YYYY-MM'), 1),
                'YYYY-MM') &lt; = #{endDur}
            </if>

        </where>

        GROUP BY to_char(add_months(to_date(t.month_of_charge, 'YYYY-MM'),
                                       1),
                            'YYYY-MM') || t.sys_shops_name || t.sys_site) t1
   FULL JOIN (SELECT TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') || t.sys_shops_name ||
                     t.sys_site sitedimension,
                     SUM(MO6_LONG_TERMS_STORAGE_FEE +
                         MO12_LONG_TERMS_STORAGE_FEE) long_fee,
                     MAX(sku) sku,
                     MAX(MATERIAL_CODE) MATERIAL_CODE
                FROM long_term_storage_fee_charges t
              /* WHERE t.sys_site = 'IT'
                 AND t.sys_shops_name = 'XMJC'
                 AND TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') = '2023-11'*/

        <where>

            <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
                AND t.SYS_SHOPS_NAME IN
                <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                    #{sysShopsName}
                </foreach>
            </if>

            <if test="param.sysSites != null and param.sysSites.size() != 0">
                AND SYS_SITE IN
                <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                    #{sysSite}
                </foreach>
            </if>
            <if test="param.startDur != null and param.startDur != '' ">
                TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') >= #{startDur}
            </if>
            <if test="param.endDur != null and param.endDur != '' ">
                TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') &lt; = #{endDur}
            </if>

        </where>
               GROUP BY TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') ||
                        t.sys_shops_name || t.sys_site) t2
     ON t1.sitedimension = t2.sitedimension
  ORDER BY mon_fee;



    </select>
    <select id="selectSkuStorage"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.TotalStorageFeeParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.entity.StationManualAllocation"
    >

        SELECT COALESCE(t.sitedimension, t1.sitedimension) sitedimension,
               COALESCE(t.sku, t1.sku) sku,
               COALESCE(t.sitedimension || t.sku, t1.sitedimension || t1.sku) sku_site_dimension,
               COALESCE(t.material_code, t1.material_code) material_code,
               NVL(t.storage_fee, 0) + NVL(t1.storage_fee, 0) STORAGE_fee

        FROM (SELECT to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),'YYYY-MM')  || t.sys_shops_name || t.sys_site sitedimension,
                     t.sku,
        MAX(t.material_code) material_code,
        SUM(decode(t.SYS_SITE,
        'JP',
        t.estimated_monthly_storage_fee * 1.1,
        t.estimated_monthly_storage_fee) ) storage_fee
              FROM MONTHLY_STORAGE_FEES t
        <where>
            STATUS = 0
            <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
                AND SYS_SHOPS_NAME IN
                <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                    #{sysShopsName}
                </foreach>
            </if>

            <if test="param.sysSites != null and param.sysSites.size() != 0">
                AND SYS_SITE IN
                <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                    #{sysSite}
                </foreach>
            </if>




            <if test="param.startDur != null and param.endDur != null ">
                AND month_of_charge >= to_char(add_months(to_date( #{param.startDur}, 'YYYY-MM'), -1),'YYYY-MM')   and  month_of_charge &lt; = to_char(add_months(to_date(#{param.endDur}, 'YYYY-MM'), -1),'YYYY-MM')
            </if>

        </where>

        GROUP BY to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),
        'YYYY-MM') || t.sys_shops_name || t.sys_site,
        t.sku) t

                 FULL JOIN

             (SELECT TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') || t.sys_shops_name || t.sys_site sitedimension,
                     t.sku,
                     MAX(t.material_code) material_code,

                    SUM(NVL(t.MO6_LONG_TERMS_STORAGE_FEE,0) + NVL(t.MO12_LONG_TERMS_STORAGE_FEE,0) ) storage_fee
              FROM long_term_storage_fee_charges t

        <where>
                 AND STATUS = 0

            <if test="param.sysShopsNames != null and param.sysShopsNames.size() != 0">
                AND SYS_SHOPS_NAME IN
                <foreach collection="param.sysShopsNames" item="sysShopsName" index="index" separator="," open="(" close=")">
                    #{sysShopsName}
                </foreach>
            </if>

            <if test="param.sysSites != null and param.sysSites.size() != 0">
                AND SYS_SITE IN
                <foreach collection="param.sysSites" item="sysSite" index="index" separator="," open="(" close=")">
                    #{sysSite}
                </foreach>
            </if>




            <if test="param.startDur != null and param.endDur != null ">
                AND to_char(SNAPSHOT_DATE, 'yyyy-mm')    >=      #{param.startDur}    and #{param.endDur} >= to_char(SNAPSHOT_DATE, 'yyyy-mm')
            </if>

        </where>


        GROUP BY TO_CHAR(t.SNAPSHOT_DATE, 'YYYY-MM') ||
        t.sys_shops_name || t.sys_site,
        t.sku) t1

             ON (t.sitedimension = t1.sitedimension AND
                 t.sku = t1.sku)


    </select>


    <select id="getSkuOverStorageDetail"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.entity.StationManualAllocation">



    </select>


    <select id="getSkuStorageDetail"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam"
            resultType="com.tadpole.cloud.platformSettlement.api.finance.entity.StationManualAllocation"
    >

       SELECT COALESCE(t.sitedimension, t1.sitedimension) sitedimension,
              COALESCE(t.fiscal_period, t1.fiscal_period) fiscal_period,
              COALESCE(t.SHOP_NAME, t1.SHOP_NAME) SHOP_NAME,
              COALESCE(t.site, t1.site) site,
              COALESCE(t.sku, t1.sku) sku,
              COALESCE(t.material_code, t1.material_code) material_code,
              NVL(COALESCE(t.department, t1.department),'0') department,
              NVL(COALESCE(t.team, t1.team),'0') team,
              COALESCE(t.currency, t1.currency) accounting_currency,
              NVL(t.mon_fee, 0) + NVL(t1.long_fee, 0) storage_fee,
              NVL(t.mon_fee, 0)  mon_fee,
              NVL(t1.long_fee, 0)  long_fee,
              NVL(m.product_type,0) product_type,
              NVL(m.company_brand,0) sales_Brand

        FROM (SELECT to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),'YYYY-MM') || sys_shops_name || sys_site sitedimension,
               to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),'YYYY-MM') fiscal_period ,
               sys_shops_name SHOP_NAME ,
               sys_site  site,
               sku,
               MAX(material_code) material_code,
               MAX(department) department,
               MAX(team) team,
               currency,
               SUM(decode(SYS_SITE,'JP',estimated_monthly_storage_fee * 1.1,estimated_monthly_storage_fee)) mon_fee
          FROM MONTHLY_STORAGE_FEES
        <where>
            AND  status in (2,3)

            <include refid="MON_STORAGE_CONDITION"/>
        </where>

         GROUP BY to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),'YYYY-MM') || sys_shops_name || sys_site,
                  sku,to_char(add_months(to_date(month_of_charge, 'YYYY-MM'), 1),'YYYY-MM'),sys_shops_name,sys_site,
                  currency) t
  FULL JOIN (SELECT TO_CHAR(SNAPSHOT_DATE, 'YYYY-MM') || sys_shops_name ||sys_site sitedimension,
                    TO_CHAR(SNAPSHOT_DATE, 'YYYY-MM') fiscal_period,
                    sys_shops_name SHOP_NAME ,
                    sys_site  site,
                    sku,
                    MAX(material_code) material_code,
                    currency,
                    MAX(department) department,
                    MAX(team) team,
                    SUM(MO6_LONG_TERMS_STORAGE_FEE + MO12_LONG_TERMS_STORAGE_FEE) long_fee
               FROM LONG_TERM_STORAGE_FEE_CHARGES

                    <where>
                        AND  status in (2,3)

                        <include refid="LONG_STORAGE_CONDITION"/>
                    </where>
              GROUP BY TO_CHAR(SNAPSHOT_DATE, 'YYYY-MM') || sys_shops_name || sys_site,
                       sku,TO_CHAR(SNAPSHOT_DATE, 'YYYY-MM'),sys_shops_name,sys_site,
                       currency) t1
        ON t.sitedimension = t1.sitedimension AND t.sku = t1.sku AND t.currency = t1.currency
    LEFT JOIN MCMS_BASE_DATA.RP_MATERIAL m
        ON COALESCE(t.material_code, t1.material_code) =  m.MATERIAL_CODE



    </select>



    <select id="updateStorageSrc"
            parameterType="com.tadpole.cloud.platformSettlement.api.finance.model.params.StationManualAllocationParam">

        BEGIN
            UPDATE monthly_storage_fees SET  status = 4
            <where>
                AND  status in (2,3)
                <include refid="MON_STORAGE_CONDITION"/>
            </where>;

            UPDATE long_term_storage_fee_charges  SET status = 4
            <where>
                AND  status in (2,3)
                <include refid="LONG_STORAGE_CONDITION"/>
            </where>;

            UPDATE inventory_storage_overage_fees SET  status = 4
            <where>
                AND  status in (2,3)
                <include refid="OVER_STORAGE_CONDITION"/>
            </where>;

        END;


    </select>

</mapper>
